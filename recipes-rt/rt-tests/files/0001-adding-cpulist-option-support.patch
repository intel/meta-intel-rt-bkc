From bcea946ebafd59a0ce5dd1012a69c09392ee8755 Mon Sep 17 00:00:00 2001
From: Junxiao Chang <junxiao.chang@intel.com>
Date: Mon, 14 Dec 2020 19:58:39 +0800
Subject: [PATCH] adding cpulist option support

user could set cpu affinity by option "-x 1-3" to have cyclictest
thread running on these CPUs.

Signed-off-by: Junxiao Chang <junxiao.chang@intel.com>
---
 src/cyclictest/cyclictest.c | 37 ++++++++++++++++++++++++++++++++++++-
 1 file changed, 36 insertions(+), 1 deletion(-)

diff --git a/src/cyclictest/cyclictest.c b/src/cyclictest/cyclictest.c
index 00e5f3d..3ea7010 100644
--- a/src/cyclictest/cyclictest.c
+++ b/src/cyclictest/cyclictest.c
@@ -222,6 +222,8 @@ static int use_fifo = 0;
 static pthread_t fifo_threadid;
 static int laptop = 0;
 static int use_histfile = 0;
+static int cpulist_begin = -1;
+static int cpulist_end = -1;
 
 #ifdef ARCH_HAS_SMI_COUNTER
 static int smi = 0;
@@ -1360,6 +1362,7 @@ static void display_help(int error)
 	       "                           format: n:c:v n=tasknum c=count v=value in us\n"
 	       "-w       --wakeup          task wakeup tracing (used with -b)\n"
 	       "-W       --wakeuprt        rt task wakeup tracing (used with -b)\n"
+               "-x <CPUSET>                Run thread #N on processor x-y\n"
 	       "	 --dbg_cyclictest  print info useful for debugging cyclictest\n",
 	       tracers
 		);
@@ -1418,6 +1421,21 @@ static int cpu_for_thread(int thread_num, int max_cpus)
 	return 0;
 }
 
+static void parse_cpulist(const char *option)
+{
+	int i;
+	char *cpulist = strdup(option);
+
+	for (i = 0; i < strlen(cpulist); i++) {
+		if(option[i] == '-') {
+			cpulist[i] = '\0';
+			break;
+		}
+	}
+	cpulist_begin = atoi(cpulist);
+	cpulist_end = atoi(cpulist + i + 1);
+	free (cpulist);
+}
 
 static void parse_cpumask(const char *option, const int max_cpus)
 {
@@ -1555,7 +1573,7 @@ static void process_options (int argc, char *argv[], int max_cpus)
 			{"help",             no_argument,       NULL, OPT_HELP },
 			{NULL, 0, NULL, 0}
 		};
-		int c = getopt_long(argc, argv, "a::A::b:Bc:Cd:D:Efh:H:i:Il:MnNo:O:p:PmqrRsSt::uUvD:wWT:",
+		int c = getopt_long(argc, argv, "a::A::b:Bc:Cd:D:Efh:H:i:Il:MnNo:O:p:PmqrRsSt::uUvD:wWT:x:",
 				    long_options, &option_index);
 		if (c == -1)
 			break;
@@ -1756,6 +1774,16 @@ static void process_options (int argc, char *argv[], int max_cpus)
 		case 'W':
 		case OPT_WAKEUPRT:
 			tracetype = WAKEUPRT; break;
+		case 'x':
+                        if (smp || numa)
+                                break;
+                        if (optarg != NULL)
+			{
+                                parse_cpulist(optarg);
+				setaffinity = AFFINITY_SPECIFIED;
+			} else
+				warn("-x usage: -x 1-3. Ignored -x option\n");
+			break;
 		case '?':
 		case OPT_HELP:
 			display_help(0); break;
@@ -2444,6 +2472,13 @@ int main(int argc, char **argv)
 		switch (setaffinity) {
 		case AFFINITY_UNSPECIFIED: par->cpu = -1; break;
 		case AFFINITY_SPECIFIED:
+			if (cpulist_begin > 0) {
+				par->cpu = (cpulist_begin + i) % max_cpus;
+				if (verbose)
+					printf("Thread %d using cpu %d.\n", i, par->cpu);
+				break;
+			}
+
 			par->cpu = cpu_for_thread(i, max_cpus);
 			if (verbose)
 				printf("Thread %d using cpu %d.\n", i,
-- 
2.17.1

